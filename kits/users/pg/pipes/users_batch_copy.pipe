TOKEN "scheduled_copy_t_users" READ

NODE get_new_events
DESCRIPTION >
    Get all events newer than last event in previous batch, deduplicate on id and updated_at
        Note that this will be empty if there are no new rows

SQL >

    WITH (SELECT max(batch_max_updated) FROM users_batch) as last_batch_ts
    SELECT 
        id, 
        coalesce(argMax(name, updated_at), '') as name, 
        coalesce(argMax(email, updated_at), '') as email, 
        coalesce(argMax(address, updated_at), '') as address, 
        coalesce(argMax(phone_number, updated_at), '') as phone_number, 
        coalesce(argMax(email_verified, updated_at), 0) as email_verified, 
        coalesce(argMax(onboarded, updated_at), 0) as onboarded,
        coalesce(argMax(deleted, updated_at), 0) as deleted,
        coalesce(argMax(__timestamp, updated_at), toDateTime(0)) as event_timestamp,
        coalesce(argMax(toFixedString(lang, 2), updated_at), toFixedString('', 2)) as lang,
        coalesce(argMax(fromUnixTimestamp64Micro(created_at), updated_at), fromUnixTimestamp64Micro(0)) as created_at,
        coalesce(max(updated_at),0) as updated_at_unix,
        max(updated_at) as batch_max_updated
    FROM users_raw
    WHERE updated_at > last_batch_ts
    GROUP BY id



NODE backfill_last_batch
DESCRIPTION >
    Get all rows from previous batch except where we already have an updated row by id
        Note that we expect this Datasource to already exist.
        This node and the previous node should have all different id's

SQL >

    WITH (SELECT max(batch_max_updated) FROM users_batch) as last_batch_ts
    SELECT * FROM users_batch
    WHERE batch_max_updated = last_batch_ts 
    AND id NOT IN (select id from get_new_events)



NODE produce_new_batch
DESCRIPTION >
    Union the updated rows with the other rows from the previous batch

SQL >

    select * from backfill_last_batch
    UNION ALL
    select * from get_new_events



NODE update_batch_max_ts
DESCRIPTION >
    Update batch_max_updated to the newest updated_at from the most recent row included in this batch
        We coalesce new_max_tx with 0 so that the column is not considered nullable, and if something goes wrong with the batch it will be recalulated

SQL >

    WITH (select max(updated_at_unix) from produce_new_batch) as new_max_ts
    select *, coalesce(new_max_ts, 0) as batch_max_updated from (select * from produce_new_batch)

TYPE copy
TARGET_DATASOURCE users_batch
COPY_SCHEDULE 0 * * * *


