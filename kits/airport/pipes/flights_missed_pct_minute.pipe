TOKEN "flights_missed_pct_minute_endpoint_read_7278" READ

TOKEN "Dashboard_Read" READ

NODE flights_missed_pct_minute_0
SQL >

    select 
        f.closed_at,
        f.passenger_count as booked_passengers,
        count(p.id) as missed_passengers
    from flights_latest as f FINAL
    inner join passengers_latest as p FINAL
    on p.flight_id = f.id
    where f.closed_at is not null
    and p.status = 'notboarded'
    group by f.id, f.closed_at, f.passenger_count
    order by closed_at desc



NODE flights_missed_pct_minute_1
SQL >

    %
    SELECT
        toStartOfMinute(closed_at) as window,
        -- Calculate percentage, defaulting to 0 if denominator is 0 or null
        round(
            ifNull(sum(missed_passengers) * 100 / nullIf(sum(booked_passengers), 0), 0),
            2
        ) as flights_missed_pct
    FROM flights_missed_pct_minute_0
    WHERE closed_at >= {% if defined(start) %} {{DateTime(start)}} {% else %} subtractHours(now(), 1) {% end %}
    AND closed_at <= {% if defined(end) %} {{DateTime(end)}} {% else %} now() {% end %}
    GROUP BY window
    ORDER BY window DESC




NODE flights_missed_pct_minute_2
SQL >

    WITH
        current_time AS (
            SELECT now() AS cur_ts
        ),
        start_time AS (
            SELECT subtractHours(toStartOfMinute(cur_ts), 1) AS start_ts FROM current_time
        )

    SELECT
        series_time AS window,
        ifNull(flights_missed_pct, 0) AS flights_missed_pct
    FROM (
        -- Generate a continuous series of minutes from start_time to current_time
        SELECT addMinutes(start_ts, number) AS series_time
        FROM numbers(61)
        CROSS JOIN start_time
        CROSS JOIN current_time
        WHERE addMinutes(start_ts, number) <= cur_ts
    ) AS series
    LEFT JOIN flights_missed_pct_minute_1
    ON series.series_time = flights_missed_pct_minute_1.window
    ORDER BY series_time DESC



